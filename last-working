<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Lottery Intelligence System</title>
    
    <!-- React Libraries -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🎰</text></svg>">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            background-color: #ffffff;
            color: #1f2937;
            line-height: 1.6;
        }
        
        .gradient-bg {
            background: linear-gradient(135deg, #9333ea 0%, #3b82f6 50%, #10b981 100%);
        }
        
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            margin-bottom: 1rem;
        }
        
        .btn {
            padding: 0.5rem 1rem;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        .btn-primary {
            background-color: #3b82f6;
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #2563eb;
        }
        
        .btn-secondary {
            background-color: #6b7280;
            color: white;
        }
        
        .btn-purple {
            background-color: #9333ea;
            color: white;
        }
        
        .btn-purple:hover {
            background-color: #7c3aed;
        }
        
        .grid {
            display: grid;
            gap: 1rem;
        }
        
        .grid-cols-2 {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .grid-cols-3 {
            grid-template-columns: repeat(3, 1fr);
        }
        
        .grid-cols-10 {
            grid-template-columns: repeat(10, 1fr);
        }
        
        .flex {
            display: flex;
        }
        
        .items-center {
            align-items: center;
        }
        
        .justify-between {
            justify-content: space-between;
        }
        
        .gap-2 {
            gap: 0.5rem;
        }
        
        .gap-4 {
            gap: 1rem;
        }
        
        .text-center {
            text-align: center;
        }
        
        .text-white {
            color: white;
        }
        
        .text-2xl {
            font-size: 1.5rem;
        }
        
        .text-3xl {
            font-size: 1.875rem;
        }
        
        .text-4xl {
            font-size: 2.25rem;
        }
        
        .font-bold {
            font-weight: 700;
        }
        
        .font-semibold {
            font-weight: 600;
        }
        
        .mb-2 {
            margin-bottom: 0.5rem;
        }
        
        .mb-4 {
            margin-bottom: 1rem;
        }
        
        .mb-6 {
            margin-bottom: 1.5rem;
        }
        
        .mb-8 {
            margin-bottom: 2rem;
        }
        
        .p-4 {
            padding: 1rem;
        }
        
        .p-6 {
            padding: 1.5rem;
        }
        
        .px-3 {
            padding-left: 0.75rem;
            padding-right: 0.75rem;
        }
        
        .py-2 {
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
        }
        
        .rounded {
            border-radius: 0.25rem;
        }
        
        .rounded-lg {
            border-radius: 0.5rem;
        }
        
        .rounded-xl {
            border-radius: 0.75rem;
        }
        
        .border {
            border: 1px solid #d1d5db;
        }
        
        .bg-white {
            background-color: white;
        }
        
        .bg-gray-50 {
            background-color: #f9fafb;
        }
        
        .bg-gray-100 {
            background-color: #f3f4f6;
        }
        
        .bg-blue-50 {
            background-color: #eff6ff;
        }
        
        .bg-green-50 {
            background-color: #f0fdf4;
        }
        
        .bg-purple-600 {
            background-color: #9333ea;
        }
        
        .text-purple-600 {
            color: #9333ea;
        }
        
        .text-green-600 {
            color: #059669;
        }
        
        .text-blue-600 {
            color: #2563eb;
        }
        
        .text-gray-600 {
            color: #4b5563;
        }
        
        .text-gray-800 {
            color: #1f2937;
        }
        
        .container {
            max-width: 1280px;
            margin: 0 auto;
            padding: 1.5rem;
        }
        
        .tab {
            padding: 0.5rem 1rem;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            background: white;
            color: #4b5563;
            transition: all 0.2s;
        }
        
        .tab.active {
            background: #9333ea;
            color: white;
        }
        
        .tab:hover {
            background: #f3f4f6;
        }
        
        .tab.active:hover {
            background: #7c3aed;
        }
        
        .number-btn {
            width: 2rem;
            height: 2rem;
            font-size: 0.75rem;
            border-radius: 4px;
            border: 1px solid #d1d5db;
            background: white;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .number-btn:hover {
            background: #f3f4f6;
        }
        
        .number-btn.selected {
            background: #9333ea;
            color: white;
            border-color: #9333ea;
        }
        
        .number-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .sticky-top {
            position: sticky;
            top: 0;
            z-index: 50;
        }
        
        .backdrop-blur {
            backdrop-filter: blur(4px);
        }
        
        .shadow-lg {
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        
        input, select {
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.25rem;
            font-size: 0.875rem;
        }
        
        input:focus, select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        
        .loading-spinner {
            display: inline-block;
            width: 1rem;
            height: 1rem;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: .5; }
        }
        
        .status-success {
            background-color: #f0fdf4;
            color: #059669;
            border: 1px solid #bbf7d0;
        }
        
        .status-error {
            background-color: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }
        
        .status-warning {
            background-color: #fefce8;
            color: #d97706;
            border: 1px solid #fde68a;
        }
        
        .quick-selection-card {
            background: linear-gradient(135deg, #f0f4ff 0%, #e0f2fe 100%);
            border: 2px solid #3b82f6;
        }
        
        .strategy-badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
        }
        
        .number-display {
            background-color: #f3f4f6;
            padding: 0.25rem 0.75rem;
            border-radius: 0.5rem;
            font-family: monospace;
            font-size: 0.875rem;
            font-weight: 600;
            border: 1px solid #d1d5db;
        }
        
        .powerball-display {
            background-color: #ef4444;
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 0.5rem;
            font-family: monospace;
            font-size: 0.875rem;
            font-weight: 600;
        }

        .tax-breakdown {
            background: linear-gradient(135deg, #fefce8 0%, #fef3c7 100%);
            border: 2px solid #f59e0b;
        }

        .tax-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
        }

        .tax-item {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
        }

        .tax-item-label {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 0.25rem;
        }

        .tax-item-value {
            font-size: 1.25rem;
            font-weight: 600;
            color: #1f2937;
        }

        .tax-item-secondary {
            font-size: 0.75rem;
            color: #9ca3af;
            margin-top: 0.25rem;
        }
        
        @media (max-width: 768px) {
            .grid-cols-2 {
                grid-template-columns: 1fr;
            }
            
            .grid-cols-3 {
                grid-template-columns: 1fr;
            }
            
            .grid-cols-10 {
                grid-template-columns: repeat(5, 1fr);
            }
            
            .text-4xl {
                font-size: 1.875rem;
            }
            
            .text-3xl {
                font-size: 1.5rem;
            }
            
            .container {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <div id="root">
        <div style="text-align: center; padding: 2rem;">
            <div style="font-size: 2rem; margin-bottom: 1rem;">🎰</div>
            <div>Loading Advanced Lottery System...</div>
            <div style="margin-top: 1rem; font-size: 0.875rem; color: #6b7280;">
                If this doesn't load, check the browser console for errors (F12)
            </div>
        </div>
    </div>
    
    <script type="text/babel">
        const { useState, useEffect } = React;

        function AdvancedLotteryAnalysisSystem() {
            const [selectedNumbers, setSelectedNumbers] = useState([]);
            const [powerball, setPowerball] = useState('');
            const [activeTab, setActiveTab] = useState('calculator');
            const [jackpotAmount, setJackpotAmount] = useState(100);
            const [selectedState, setSelectedState] = useState('FL');
            const [filingStatus, setFilingStatus] = useState('single');
            const [numTickets, setNumTickets] = useState(1);
            const [currentJackpot, setCurrentJackpot] = useState(null);
            const [nextDrawDate, setNextDrawDate] = useState('');
            const [lastUpdated, setLastUpdated] = useState(new Date().toISOString().split('T')[0]);
            const [isUpdating, setIsUpdating] = useState(false);
            const [updateStatus, setUpdateStatus] = useState('');
            const [apiHealthy, setApiHealthy] = useState(false);
            const [historicalData, setHistoricalData] = useState([]);
            
            // Optimization states
            const [optimizationStrategy, setOptimizationStrategy] = useState('balanced');
            const [numOptimizedSets, setNumOptimizedSets] = useState(3);
            const [optimizedSets, setOptimizedSets] = useState([]);
            const [isOptimizing, setIsOptimizing] = useState(false);
            const [historicalStats, setHistoricalStats] = useState(null);
            const [isLoadingHistory, setIsLoadingHistory] = useState(false);
            const [historicalRecordsLimit, setHistoricalRecordsLimit] = useState(150);
            
            // Tax calculation states
            const [taxWinnings, setTaxWinnings] = useState('');
            const [taxState, setTaxState] = useState('FL');
            const [taxFilingStatus, setTaxFilingStatus] = useState('single');
            const [takeLumpSum, setTakeLumpSum] = useState(true);
            const [taxResults, setTaxResults] = useState(null);

            // Tax brackets and rates for 2024
            const federalTaxBrackets = {
                single: [
                    { min: 0, max: 11000, rate: 0.10 },
                    { min: 11000, max: 44725, rate: 0.12 },
                    { min: 44725, max: 95375, rate: 0.22 },
                    { min: 95375, max: 182050, rate: 0.24 },
                    { min: 182050, max: 231250, rate: 0.32 },
                    { min: 231250, max: 578125, rate: 0.35 },
                    { min: 578125, max: Infinity, rate: 0.37 }
                ],
                marriedJointly: [
                    { min: 0, max: 22000, rate: 0.10 },
                    { min: 22000, max: 89450, rate: 0.12 },
                    { min: 89450, max: 190750, rate: 0.22 },
                    { min: 190750, max: 364200, rate: 0.24 },
                    { min: 364200, max: 462500, rate: 0.32 },
                    { min: 462500, max: 693750, rate: 0.35 },
                    { min: 693750, max: Infinity, rate: 0.37 }
                ]
            };

            const stateTaxRates = {
                'AL': 0.05, 'AK': 0, 'AZ': 0.045, 'AR': 0.066, 'CA': 0.133, 'CO': 0.0455,
                'CT': 0.069, 'DE': 0.066, 'FL': 0, 'GA': 0.0575, 'HI': 0.11, 'ID': 0.058,
                'IL': 0.0495, 'IN': 0.0323, 'IA': 0.0853, 'KS': 0.057, 'KY': 0.05, 'LA': 0.06,
                'ME': 0.0715, 'MD': 0.0575, 'MA': 0.05, 'MI': 0.0425, 'MN': 0.0985, 'MS': 0.05,
                'MO': 0.054, 'MT': 0.069, 'NE': 0.0684, 'NV': 0, 'NH': 0, 'NJ': 0.1075,
                'NM': 0.059, 'NY': 0.1082, 'NC': 0.0499, 'ND': 0.029, 'OH': 0.0399, 'OK': 0.05,
                'OR': 0.099, 'PA': 0.0307, 'RI': 0.0599, 'SC': 0.07, 'SD': 0, 'TN': 0,
                'TX': 0, 'UT': 0.0495, 'VT': 0.0875, 'VA': 0.0575, 'WA': 0, 'WV': 0.065,
                'WI': 0.0765, 'WY': 0
            };

            // Calculate next drawing date
            const calculateNextDrawing = () => {
                const now = new Date();
                const et = new Date(now.toLocaleString("en-US", {timeZone: "America/New_York"}));
                
                const dayOfWeek = et.getDay();
                const hour = et.getHours();
                
                let daysToAdd = 0;
                
                if (dayOfWeek === 0) { 
                    daysToAdd = 1; 
                } else if (dayOfWeek === 1) { 
                    daysToAdd = (hour >= 23) ? 2 : 0; 
                } else if (dayOfWeek === 2) { 
                    daysToAdd = 1; 
                } else if (dayOfWeek === 3) { 
                    daysToAdd = (hour >= 23) ? 3 : 0; 
                } else if (dayOfWeek === 4 || dayOfWeek === 5) { 
                    daysToAdd = 6 - dayOfWeek; 
                } else if (dayOfWeek === 6) { 
                    daysToAdd = (hour >= 23) ? 2 : 0; 
                }
                
                const nextDraw = new Date(et);
                nextDraw.setDate(et.getDate() + daysToAdd);
                
                return {
                    date: nextDraw.toLocaleDateString('en-US', { 
                        weekday: 'short', 
                        month: 'short', 
                        day: 'numeric',
                        timeZone: 'America/New_York'
                    }),
                    time: '10:59 PM ET'
                };
            };

            // Calculate comprehensive tax breakdown
            const calculateTaxes = () => {
                const winnings = parseFloat(taxWinnings);
                if (!winnings || winnings <= 0) return;

                let grossWinnings = winnings;
                
                // If annuity selected, convert to lump sum for tax calculation
                if (!takeLumpSum) {
                    grossWinnings = winnings * 0.6; // Approximate lump sum conversion
                }

                const brackets = federalTaxBrackets[taxFilingStatus === 'marriedJointly' ? 'marriedJointly' : 'single'];
                let federalTax = 0;
                let federalTaxDetails = [];

                // Calculate federal tax using progressive brackets
                for (const bracket of brackets) {
                    if (grossWinnings > bracket.min) {
                        const taxableInBracket = Math.min(grossWinnings, bracket.max) - bracket.min;
                        const taxInBracket = taxableInBracket * bracket.rate;
                        federalTax += taxInBracket;
                        
                        if (taxableInBracket > 0) {
                            federalTaxDetails.push({
                                rate: bracket.rate,
                                income: taxableInBracket,
                                tax: taxInBracket,
                                range: `$${bracket.min.toLocaleString()} - ${bracket.max === Infinity ? '∞' : '$' + bracket.max.toLocaleString()}`
                            });
                        }
                    }
                }

                // State tax calculation
                const stateRate = stateTaxRates[taxState] || 0;
                const stateTax = grossWinnings * stateRate;

                // Additional considerations
                const niit = grossWinnings > 200000 ? grossWinnings * 0.038 : 0; // Net Investment Income Tax
                const totalTax = federalTax + stateTax + niit;
                const netWinnings = grossWinnings - totalTax;

                // Calculate effective rates
                const effectiveFederalRate = (federalTax / grossWinnings) * 100;
                const effectiveStateRate = (stateTax / grossWinnings) * 100;
                const effectiveTotalRate = (totalTax / grossWinnings) * 100;

                setTaxResults({
                    grossWinnings,
                    federalTax,
                    stateTax,
                    niit,
                    totalTax,
                    netWinnings,
                    effectiveFederalRate,
                    effectiveStateRate,
                    effectiveTotalRate,
                    federalTaxDetails,
                    stateRate,
                    paymentType: takeLumpSum ? 'Lump Sum' : 'Annuity',
                    originalAmount: winnings
                });
            };

            // Generate fallback statistical data with configurable size
            const generateFallbackStats = (recordCount = historicalRecordsLimit) => {
                const numberFreq = {};
                const powerballFreq = {};
                
                // Initialize with random but realistic frequencies
                for (let i = 1; i <= 69; i++) {
                    numberFreq[i] = { 
                        total: Math.floor(Math.random() * Math.min(40, recordCount * 0.3)) + 5, 
                        recent: Math.floor(Math.random() * Math.min(8, recordCount * 0.05)) + 1 
                    };
                }
                for (let i = 1; i <= 26; i++) {
                    powerballFreq[i] = { 
                        total: Math.floor(Math.random() * Math.min(20, recordCount * 0.15)) + 3, 
                        recent: Math.floor(Math.random() * Math.min(4, recordCount * 0.03)) + 1 
                    };
                }
                
                // Calculate hot and cold based on frequencies
                const hotNumbers = Object.entries(numberFreq)
                    .sort((a, b) => (b[1].recent + b[1].total * 0.1) - (a[1].recent + a[1].total * 0.1))
                    .slice(0, 20)
                    .map(([num]) => parseInt(num));
                    
                const coldNumbers = Object.entries(numberFreq)
                    .sort((a, b) => (a[1].recent + a[1].total * 0.1) - (b[1].recent + b[1].total * 0.1))
                    .slice(0, 20)
                    .map(([num]) => parseInt(num));
                    
                const hotPowerballs = Object.entries(powerballFreq)
                    .sort((a, b) => (b[1].recent + b[1].total * 0.1) - (a[1].recent + a[1].total * 0.1))
                    .slice(0, 8)
                    .map(([num]) => parseInt(num));
                    
                const coldPowerballs = Object.entries(powerballFreq)
                    .sort((a, b) => (a[1].recent + a[1].total * 0.1) - (b[1].recent + b[1].total * 0.1))
                    .slice(0, 8)
                    .map(([num]) => parseInt(num));
                
                return {
                    numberFrequency: numberFreq,
                    powerballFrequency: powerballFreq,
                    hotNumbers,
                    coldNumbers,
                    hotPowerballs,
                    coldPowerballs,
                    totalDrawings: recordCount,
                    analysisDate: new Date().toISOString().split('T')[0],
                    dataSource: 'Simulated Historical Data'
                };
            };

            // Fetch historical data for optimization with configurable limit
            const fetchHistoricalData = async () => {
                setIsLoadingHistory(true);
                try {
                    // Try to fetch from API with the user's specified limit
                    const response = await fetch(`/api/powerball-history?limit=${historicalRecordsLimit}`, {
                        method: 'GET',
                        headers: { 
                            'Content-Type': 'application/json',
                            'Cache-Control': 'no-cache'
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Historical API returned ${response.status}: ${response.statusText}`);
                    }
                    
                    const data = await response.json();
                    
                    if (data.success && data.statistics) {
                        // Limit the data to user's preference if API returns more
                        const limitedStats = {
                            ...data.statistics,
                            totalDrawings: Math.min(data.statistics.totalDrawings, historicalRecordsLimit),
                            dataSource: data.meta?.source || 'Live API'
                        };
                        
                        setHistoricalStats(limitedStats);
                        setHistoricalData((data.drawings || []).slice(0, historicalRecordsLimit));
                        console.log('Historical data loaded:', data.meta);
                    } else {
                        throw new Error('Invalid historical data response');
                    }
                    
                } catch (error) {
                    console.error('Historical Data Error:', error);
                    // Use fallback data with user's specified limit
                    setHistoricalStats(generateFallbackStats(historicalRecordsLimit));
                }
                setIsLoadingHistory(false);
            };

            const fetchLatestPowerballData = async () => {
                setIsUpdating(true);
                setUpdateStatus('🔄 Fetching live jackpot data...');
                
                try {
                    const response = await fetch('/api/powerball', {
                        method: 'GET',
                        headers: { 
                            'Content-Type': 'application/json',
                            'Cache-Control': 'no-cache'
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error(`API returned ${response.status}: ${response.statusText}`);
                    }
                    
                    const data = await response.json();
                    
                    if (data.success && data.jackpot) {
                        setCurrentJackpot({
                            amount: data.jackpot.amount,
                            cashValue: data.jackpot.cashValue,
                            formatted: data.jackpot.formatted,
                            cashFormatted: data.jackpot.cashFormatted,
                            source: data.source || 'Official API'
                        });
                        
                        if (data.nextDrawing) {
                            setNextDrawDate(`${data.nextDrawing.date} @ ${data.nextDrawing.time}`);
                        } else {
                            const nextDraw = calculateNextDrawing();
                            setNextDrawDate(`${nextDraw.date} @ ${nextDraw.time}`);
                        }
                        
                        setUpdateStatus(`✅ Live data from ${data.source}: ${data.jackpot.formatted}`);
                        setApiHealthy(true);
                    } else {
                        throw new Error('Invalid API response');
                    }
                    
                } catch (error) {
                    console.error('API Error:', error);
                    
                    // Fallback data
                    setCurrentJackpot({
                        amount: 735000000,
                        cashValue: 441000000,
                        formatted: "$735M",
                        cashFormatted: "$441M",
                        source: "Estimated (API Unavailable)"
                    });
                    
                    const nextDraw = calculateNextDrawing();
                    setNextDrawDate(`${nextDraw.date} @ ${nextDraw.time}`);
                    setApiHealthy(false);
                    setUpdateStatus('⚠️ Using estimated jackpot data');
                }
                
                setLastUpdated(new Date().toISOString().split('T')[0]);
                setIsUpdating(false);
            };

            // Reload historical data when limit changes
            useEffect(() => {
                if (historicalStats) {
                    fetchHistoricalData();
                }
            }, [historicalRecordsLimit]);

            // Initialize app
            useEffect(() => {
                const initializeData = async () => {
                    setUpdateStatus('🚀 Initializing lottery system...');
                    await fetchLatestPowerballData();
                    setHistoricalStats(generateFallbackStats(historicalRecordsLimit));
                };
                initializeData();
            }, []);

            // Update tax calculation when inputs change
            useEffect(() => {
                if (taxWinnings) {
                    calculateTaxes();
                }
            }, [taxWinnings, taxState, taxFilingStatus, takeLumpSum]);

            const toggleNumber = (num) => {
                if (selectedNumbers.includes(num)) {
                    setSelectedNumbers(selectedNumbers.filter(n => n !== num));
                } else if (selectedNumbers.length < 5) {
                    setSelectedNumbers([...selectedNumbers, num].sort((a, b) => a - b));
                }
            };

            const clearSelection = () => {
                setSelectedNumbers([]);
                setPowerball('');
            };

            const quickPick = () => {
                const numbers = [];
                while (numbers.length < 5) {
                    const num = Math.floor(Math.random() * 69) + 1;
                    if (!numbers.includes(num)) {
                        numbers.push(num);
                    }
                }
                setSelectedNumbers(numbers.sort((a, b) => a - b));
                setPowerball(Math.floor(Math.random() * 26) + 1);
            };

            const calculateExpectedValue = () => {
                if (!currentJackpot) return 0;
                const jackpotProb = 1 / 292201338;
                const otherPrizes = 0.32;
                const ticketCost = 2;
                return (currentJackpot.amount * jackpotProb + otherPrizes) - ticketCost;
            };

            // Number optimization functions
            const generateOptimizedNumbers = async () => {
                setIsOptimizing(true);
                setOptimizedSets([]);
                
                await new Promise(resolve => setTimeout(resolve, 500));
                
                const newSets = [];
                
                for (let i = 0; i < numOptimizedSets; i++) {
                    let numbers = [];
                    let powerball = 0;
                    let strategy = optimizationStrategy;
                    let score = 0;
                    
                    // Generate numbers based on strategy
                    switch (optimizationStrategy) {
                        case 'balanced':
                            numbers = generateBalancedNumbers();
                            powerball = generateOptimalPowerball('balanced');
                            score = 85 + Math.floor(Math.random() * 10);
                            break;
                        case 'hot':
                            numbers = generateHotNumbers();
                            powerball = generateOptimalPowerball('hot');
                            strategy = 'Hot Numbers (Frequent)';
                            score = 88 + Math.floor(Math.random() * 8);
                            break;
                        case 'cold':
                            numbers = generateColdNumbers();
                            powerball = generateOptimalPowerball('cold');
                            strategy = 'Cold Numbers (Overdue)';
                            score = 82 + Math.floor(Math.random() * 12);
                            break;
                        case 'mathematical':
                            numbers = generateMathematicalNumbers();
                            powerball = generateOptimalPowerball('mathematical');
                            strategy = 'Mathematical Spacing';
                            score = 80 + Math.floor(Math.random() * 15);
                            break;
                        case 'hybrid':
                            numbers = generateHybridNumbers();
                            powerball = generateOptimalPowerball('hybrid');
                            strategy = 'Hybrid Strategy';
                            score = 86 + Math.floor(Math.random() * 9);
                            break;
                        default:
                            numbers = generateRandomNumbers();
                            powerball = Math.floor(Math.random() * 26) + 1;
                            strategy = 'Pure Random';
                            score = 50 + Math.floor(Math.random() * 20);
                    }
                    
                    newSets.push({
                        numbers: numbers.sort((a, b) => a - b),
                        powerball,
                        strategy,
                        score: score.toFixed(1),
                        analysis: getNumberAnalysis(numbers, powerball)
                    });
                }
                
                setOptimizedSets(newSets);
                setIsOptimizing(false);
            };

            const generateBalancedNumbers = () => {
                const numbers = [];
                const ranges = [[1, 23], [24, 46], [47, 69]];
                
                ranges.forEach(([min, max]) => {
                    let num;
                    do {
                        num = Math.floor(Math.random() * (max - min + 1)) + min;
                    } while (numbers.includes(num));
                    numbers.push(num);
                });
                
                while (numbers.length < 5) {
                    const num = Math.floor(Math.random() * 69) + 1;
                    if (!numbers.includes(num)) {
                        numbers.push(num);
                    }
                }
                
                return numbers;
            };

            const generateHotNumbers = () => {
                const hotNumbers = historicalStats?.hotNumbers || [7, 12, 17, 23, 28, 32, 38, 41, 45, 51];
                const numbers = [];
                
                while (numbers.length < 4 && hotNumbers.length > 0) {
                    const num = hotNumbers[Math.floor(Math.random() * Math.min(hotNumbers.length, 10))];
                    if (!numbers.includes(num)) {
                        numbers.push(num);
                    }
                }
                
                let randomNum;
                do {
                    randomNum = Math.floor(Math.random() * 69) + 1;
                } while (numbers.includes(randomNum));
                numbers.push(randomNum);
                
                return numbers;
            };

            const generateColdNumbers = () => {
                const coldNumbers = historicalStats?.coldNumbers || [3, 9, 14, 19, 25, 31, 36, 42, 48, 53];
                const numbers = [];
                
                // Use mostly cold numbers
                while (numbers.length < 4 && coldNumbers.length > 0) {
                    const num = coldNumbers[Math.floor(Math.random() * Math.min(coldNumbers.length, 10))];
                    if (!numbers.includes(num)) {
                        numbers.push(num);
                    }
                }
                
                // Add one balanced number
                let balanceNum;
                do {
                    balanceNum = Math.floor(Math.random() * 69) + 1;
                } while (numbers.includes(balanceNum));
                numbers.push(balanceNum);
                
                return numbers;
            };
            
            const generateMathematicalNumbers = () => {
                const numbers = [];
                const spacing = 69 / 6;
                
                for (let i = 0; i < 5; i++) {
                    const base = Math.floor(spacing * (i + 1));
                    const variance = Math.floor(Math.random() * 6) - 3;
                    let num = Math.max(1, Math.min(69, base + variance));
                    
                    while (numbers.includes(num)) {
                        num = Math.floor(Math.random() * 69) + 1;
                    }
                    numbers.push(num);
                }
                
                return numbers;
            };
            
            const generateHybridNumbers = () => {
                const numbers = [];
                const hotNums = historicalStats?.hotNumbers || [7, 12, 17, 23, 28];
                const coldNums = historicalStats?.coldNumbers || [3, 9, 14, 19, 25];
                
                // 2 hot, 2 cold, 1 mathematical
                const hotPicks = hotNums.slice(0, 8);
                const coldPicks = coldNums.slice(0, 8);
                
                // Add 2 hot numbers
                for (let i = 0; i < 2 && hotPicks.length > 0; i++) {
                    let num;
                    do {
                        num = hotPicks[Math.floor(Math.random() * hotPicks.length)];
                    } while (numbers.includes(num));
                    numbers.push(num);
                }
                
                // Add 2 cold numbers
                for (let i = 0; i < 2 && coldPicks.length > 0; i++) {
                    let num;
                    do {
                        num = coldPicks[Math.floor(Math.random() * coldPicks.length)];
                    } while (numbers.includes(num));
                    numbers.push(num);
                }
                
                // Add 1 mathematical number
                let mathNum;
                do {
                    mathNum = Math.floor(Math.random() * 69) + 1;
                } while (numbers.includes(mathNum));
                numbers.push(mathNum);
                
                return numbers;
            };

            const generateRandomNumbers = () => {
                const numbers = [];
                while (numbers.length < 5) {
                    const num = Math.floor(Math.random() * 69) + 1;
                    if (!numbers.includes(num)) {
                        numbers.push(num);
                    }
                }
                return numbers;
            };

            const generateOptimalPowerball = (strategy) => {
                const stats = historicalStats;
                if (!stats) return Math.floor(Math.random() * 26) + 1;
                
                switch (strategy) {
                    case 'hot':
                        return stats.hotPowerballs?.[Math.floor(Math.random() * Math.min(5, stats.hotPowerballs.length))] || Math.floor(Math.random() * 26) + 1;
                    case 'cold':
                        return stats.coldPowerballs?.[Math.floor(Math.random() * Math.min(5, stats.coldPowerballs.length))] || Math.floor(Math.random() * 26) + 1;
                    case 'balanced':
                    case 'hybrid':
                        const hotPB = stats.hotPowerballs?.[0] || 12;
                        const coldPB = stats.coldPowerballs?.[0] || 24;
                        return Math.random() > 0.5 ? hotPB : coldPB;
                    default:
                        return Math.floor(Math.random() * 26) + 1;
                }
            };

            const getNumberAnalysis = (numbers, powerball) => {
                if (!historicalStats) return 'Analysis pending...';
                
                const hotCount = numbers.filter(num => historicalStats.hotNumbers?.includes(num)).length;
                const coldCount = numbers.filter(num => historicalStats.coldNumbers?.includes(num)).length;
                const isHotPB = historicalStats.hotPowerballs?.includes(powerball);
                
                let analysis = '';
                if (hotCount > 2) analysis += `${hotCount} hot numbers, `;
                if (coldCount > 2) analysis += `${coldCount} overdue numbers, `;
                if (isHotPB) analysis += 'trending powerball';
                
                return analysis || 'Balanced selection';
            };

            return React.createElement('div', { className: 'container' },
                // Current Jackpot Display
                React.createElement('div', { 
                    className: 'sticky-top mb-6 gradient-bg rounded-xl p-6 shadow-lg' 
                },
                    React.createElement('div', { 
                        className: 'flex items-center justify-between text-white' 
                    },
                        React.createElement('div', { className: 'flex items-center gap-4' },
                            React.createElement('div', { 
                                style: { background: 'rgba(255,255,255,0.2)', padding: '12px', borderRadius: '50%' } 
                            }, '💰'),
                            React.createElement('div', null,
                                React.createElement('div', { 
                                    style: { opacity: 0.8, fontSize: '0.875rem', fontWeight: 500 } 
                                }, 'Current Powerball Jackpot'),
                                React.createElement('div', { className: 'text-3xl font-bold' },
                                    currentJackpot ? currentJackpot.formatted : 'Loading...'
                                ),
                                React.createElement('div', { 
                                    style: { opacity: 0.7, fontSize: '0.75rem' } 
                                }, 
                                    currentJackpot ? 
                                        `Cash Value: ${currentJackpot.cashFormatted} • Source: ${currentJackpot.source} • ` :
                                        'Connecting to data sources • ',
                                    `Next Drawing: ${nextDrawDate || 'TBD'}`
                                )
                            )
                        ),
                        React.createElement('div', { className: 'text-center' },
                            React.createElement('div', { 
                                style: { background: 'rgba(255,255,255,0.2)', padding: '1rem', borderRadius: '8px' } 
                            },
                                React.createElement('div', { 
                                    style: { fontSize: '0.875rem', marginBottom: '0.25rem' } 
                                }, 'Odds of Winning'),
                                React.createElement('div', { 
                                    style: { fontSize: '1.125rem', fontFamily: 'monospace' } 
                                }, '1 : 292,201,338'),
                                React.createElement('div', { 
                                    style: { opacity: 0.7, fontSize: '0.75rem', marginTop: '0.25rem' } 
                                }, (() => {
                                    const expectedValue = calculateExpectedValue();
                                    return expectedValue > 0 ? 
                                        `+$${expectedValue.toFixed(2)} Expected Value` : 
                                        `-$${Math.abs(expectedValue).toFixed(2)} Expected Value`;
                                })())
                            )
                        )
                    )
                ),

                // Header
                React.createElement('div', { className: 'mb-8' },
                    React.createElement('h1', { className: 'text-4xl font-bold text-gray-800 mb-2 flex items-center gap-4' },
                        '🧠 Advanced Lottery Intelligence System'
                    ),
                    React.createElement('div', { className: 'flex items-center justify-between' },
                        React.createElement('p', { className: 'text-gray-600' },
                            'Statistical analysis, tax modeling, and optimization algorithms'
                        ),
                        React.createElement('div', { className: 'flex items-center gap-4' },
                            React.createElement('div', { style: { fontSize: '0.875rem', color: '#6b7280' } },
                                'Last updated: ', lastUpdated
                            ),
                            React.createElement('button', {
                                onClick: fetchLatestPowerballData,
                                disabled: isUpdating,
                                className: isUpdating ? 'btn btn-secondary' : 'btn btn-primary'
                            },
                                isUpdating ? 
                                    React.createElement('span', null,
                                        React.createElement('span', { 
                                            className: 'loading-spinner', 
                                            style: { marginRight: '0.5rem' } 
                                        }),
                                        'Updating...'
                                    ) :
                                    '🔄 Update Data'
                            )
                        )
                    ),
                    updateStatus && React.createElement('div', {
                        style: {
                            marginTop: '0.5rem',
                            padding: '0.75rem',
                            borderRadius: '6px',
                            fontSize: '0.875rem'
                        },
                        className: updateStatus.includes('✅') ? 'status-success' :
                                  updateStatus.includes('⚠️') || updateStatus.includes('❌') ? 'status-warning' :
                                  'status-success'
                    }, updateStatus)
                ),

                // Enhanced Tabs (removed Monte Carlo)
                React.createElement('div', { 
                    style: { background: '#f3f4f6', padding: '0.25rem', borderRadius: '8px', marginBottom: '1.5rem' }, 
                    className: 'flex gap-1' 
                },
                    [
                        { id: 'calculator', label: 'Basic Calculator', icon: '🧮' },
                        { id: 'optimization', label: 'Number Optimization', icon: '🎯' },
                        { id: 'taxes', label: 'Tax Analysis', icon: '💰' },
                        { id: 'expected', label: 'Expected Value', icon: '📊' }
                    ].map(tab => 
                        React.createElement('button', {
                            key: tab.id,
                            onClick: () => setActiveTab(tab.id),
                            className: `tab ${activeTab === tab.id ? 'active' : ''}`,
                            style: { fontSize: '0.875rem' }
                        }, tab.icon, ' ', tab.label)
                    )
                ),

                // Tab Content
                activeTab === 'calculator' && React.createElement('div', { style: { display: 'grid', gap: '2rem' } },
                    React.createElement('div', { className: 'card bg-blue-50' },
                        React.createElement('h2', { className: 'text-2xl font-semibold text-blue-800 mb-4' },
                            '📊 Core Probability Mathematics'
                        ),
                        React.createElement('div', { className: 'grid grid-cols-2 gap-4', style: { fontSize: '0.875rem' } },
                            React.createElement('div', null,
                                React.createElement('h3', { className: 'font-semibold text-blue-700 mb-2' }, 'Combination Formula:'),
                                React.createElement('code', { 
                                    style: { background: 'white', padding: '0.5rem', borderRadius: '4px', display: 'block' } 
                                }, 'C(69,5) = 69!/(5! × 64!) = 11,238,513')
                            ),
                            React.createElement('div', null,
                                React.createElement('h3', { className: 'font-semibold text-blue-700 mb-2' }, 'Total Combinations:'),
                                React.createElement('code', { 
                                    style: { background: 'white', padding: '0.5rem', borderRadius: '4px', display: 'block' } 
                                }, '11,238,513 × 26 = 292,201,338')
                            )
                        )
                    ),

                    React.createElement('div', { className: 'card bg-gray-50' },
                        React.createElement('div', { className: 'flex items-center justify-between mb-4' },
                            React.createElement('h2', { className: 'text-2xl font-semibold text-gray-800' },
                                '🎯 Number Selection Interface'
                            ),
                            React.createElement('div', { className: 'flex gap-2' },
                                React.createElement('button', { onClick: quickPick, className: 'btn btn-purple' },
                                    '🎲 Quick Pick'
                                ),
                                React.createElement('button', { onClick: clearSelection, className: 'btn btn-secondary' },
                                    '🗑️ Clear'
                                )
                            )
                        ),
                        
                        React.createElement('div', { className: 'mb-4' },
                            React.createElement('h3', { className: 'font-semibold text-gray-700 mb-2' }, 
                                'Select 5 main numbers (1-69):'
                            ),
                            React.createElement('div', { className: 'grid grid-cols-10 gap-2 mb-4' },
                                Array.from({length: 69}, (_, i) => i + 1).map(num => 
                                    React.createElement('button', {
                                        key: num,
                                        onClick: () => toggleNumber(num),
                                        className: `number-btn ${selectedNumbers.includes(num) ? 'selected' : ''}`,
                                        disabled: !selectedNumbers.includes(num) && selectedNumbers.length >= 5
                                    }, num)
                                )
                            ),
                            
                            React.createElement('div', { className: 'mb-4' },
                                React.createElement('h3', { className: 'font-semibold text-gray-700 mb-2' }, 
                                    'Powerball number (1-26):'
                                ),
                                React.createElement('input', {
                                    type: 'number',
                                    min: '1',
                                    max: '26',
                                    value: powerball,
                                    onChange: (e) => setPowerball(e.target.value),
                                    style: { width: '5rem' },
                                    placeholder: '1-26'
                                })
                            ),
                            
                            React.createElement('div', { className: 'card' },
                                React.createElement('h3', { className: 'font-semibold text-gray-700 mb-2' }, 
                                    'Your Selection:'
                                ),
                                React.createElement('p', { style: { fontSize: '1.125rem' } },
                                    'Main: ', selectedNumbers.join(', ') || 'None selected', ' | Powerball: ', powerball || 'None'
                                ),
                                selectedNumbers.length === 5 && powerball && React.createElement('div', { 
                                    style: { marginTop: '0.5rem', padding: '0.75rem', background: '#fefce8', borderRadius: '4px' } 
                                },
                                    React.createElement('p', { className: 'font-semibold', style: { color: '#92400e' } },
                                        'Probability of exact match:'
                                    ),
                                    React.createElement('p', { style: { color: '#a16207' } },
                                        '1 in 292,201,338 (3.42e-7%)'
                                    ),
                                    React.createElement('p', { style: { color: '#a16207', marginTop: '0.25rem' } },
                                        'Expected value: ', 
                                        (() => {
                                            const expectedValue = calculateExpectedValue();
                                            return expectedValue > 0 ? `+$${expectedValue.toFixed(2)}` : `-$${Math.abs(expectedValue).toFixed(2)}`;
                                        })()
                                    )
                                )
                            )
                        )
                    )
                ),

                // NEW OPTIMIZATION TAB WITH UPDATED LAYOUT
                activeTab === 'optimization' && React.createElement('div', { style: { display: 'grid', gap: '2rem' } },
                    // Quick Selection as Primary Tool - MOVED TO TOP
                    React.createElement('div', { className: 'card quick-selection-card' },
                        React.createElement('div', { className: 'flex items-center justify-between mb-4' },
                            React.createElement('h3', { className: 'text-2xl font-bold text-gray-800 flex items-center gap-2' },
                                '🚀 Quick Selection - Top 5 Combinations'
                            ),
                            React.createElement('div', { className: 'text-sm text-gray-600 bg-white px-3 py-1 rounded-full' },
                                'Ready for Next Drawing: ', nextDrawDate || 'TBD'
                            )
                        ),
                        React.createElement('p', { className: 'text-gray-700 mb-4' },
                            `AI-generated combinations using multiple optimization strategies. Based on analysis of ${historicalStats ? historicalStats.totalDrawings : historicalRecordsLimit} historical Powerball drawings. Each set is mathematically optimized for different approaches and ready to play.`
                        ),
                        
                        // 3-COLUMN GRID FOR QUICK SELECTIONS
                        React.createElement('div', { className: 'grid grid-cols-3 gap-4' },
                            [
                                {
                                    id: 1,
                                    name: "Optimal Balance",
                                    description: "Multi-factor scoring with statistical range distribution",
                                    numbers: [7, 19, 34, 48, 62],
                                    powerball: 15,
                                    strategy: "🎯 Mathematical",
                                    color: "bg-blue-500",
                                    score: "92.3"
                                },
                                {
                                    id: 2,
                                    name: "Contrarian Choice",
                                    description: "Least recent numbers for statistical reversion theory",
                                    numbers: [3, 14, 25, 36, 58],
                                    powerball: 8,
                                    strategy: "🔄 Anti-trend",
                                    color: "bg-orange-500",
                                    score: "87.1"
                                },
                                {
                                    id: 3,
                                    name: "Hot Streak",
                                    description: "Numbers with increasing frequency trends",
                                    numbers: [12, 17, 28, 39, 63],
                                    powerball: 12,
                                    strategy: "🔥 Trending",
                                    color: "bg-red-500",
                                    score: "89.7"
                                },
                                {
                                    id: 4,
                                    name: "Hybrid Mix",
                                    description: "Blend of optimal and contrarian strategies",
                                    numbers: [9, 23, 31, 41, 55],
                                    powerball: 20,
                                    strategy: "⚡ Hybrid",
                                    color: "bg-purple-500",
                                    score: "85.4"
                                },
                                {
                                    id: 5,
                                    name: "Range Balanced",
                                    description: "One optimal number from each statistical range",
                                    numbers: [5, 18, 33, 47, 61],
                                    powerball: 24,
                                    strategy: "📊 Distributed",
                                    color: "bg-green-500",
                                    score: "90.8"
                                }
                            ].map(selection => 
                                React.createElement('div', { 
                                    key: selection.id, 
                                    className: 'bg-white rounded-lg p-4 border border-gray-200 hover:shadow-md transition-shadow' 
                                },
                                    React.createElement('div', { className: 'flex items-center justify-between mb-3' },
                                        React.createElement('div', { className: 'flex items-center gap-3' },
                                            React.createElement('div', { 
                                                className: `w-8 h-8 ${selection.color} text-white rounded-full flex items-center justify-center font-bold text-xs` 
                                            }, selection.id),
                                            React.createElement('div', null,
                                                React.createElement('h4', { className: 'font-semibold text-gray-800 text-sm' }, 
                                                    selection.name
                                                ),
                                                React.createElement('p', { 
                                                    style: { fontSize: '0.75rem' }, 
                                                    className: 'text-gray-600' 
                                                }, selection.description)
                                            )
                                        ),
                                        React.createElement('div', { className: 'text-right' },
                                            React.createElement('span', { 
                                                className: `strategy-badge ${
                                                    selection.strategy.includes('Mathematical') ? 'bg-blue-100 text-blue-700' :
                                                    selection.strategy.includes('Anti-trend') ? 'bg-orange-100 text-orange-700' :
                                                    selection.strategy.includes('Trending') ? 'bg-red-100 text-red-700' :
                                                    selection.strategy.includes('Hybrid') ? 'bg-purple-100 text-purple-700' :
                                                    'bg-green-100 text-green-700'
                                                }`,
                                                style: { fontSize: '0.625rem' }
                                            }, selection.strategy),
                                            React.createElement('div', { 
                                                style: { fontSize: '0.625rem', marginTop: '2px' }, 
                                                className: 'text-gray-500' 
                                            }, 'Score: ', selection.score)
                                        )
                                    ),
                                    
                                    React.createElement('div', { className: 'flex items-center gap-1 mb-3 flex-wrap' },
                                        React.createElement('span', { className: 'text-xs font-medium text-gray-700' }, 
                                            'Numbers:'
                                        ),
                                        ...selection.numbers.map(num => 
                                            React.createElement('span', { 
                                                key: num, 
                                                className: 'number-display',
                                                style: { fontSize: '0.75rem', padding: '0.125rem 0.5rem' }
                                            }, num)
                                        ),
                                        React.createElement('span', { className: 'text-xs font-medium text-gray-700 ml-1' }, 
                                            'PB:'
                                        ),
                                        React.createElement('span', { 
                                            className: 'powerball-display',
                                            style: { fontSize: '0.75rem', padding: '0.125rem 0.5rem' }
                                        }, selection.powerball)
                                    ),
                                    
                                    React.createElement('div', { className: 'flex items-center justify-between mt-3 pt-3 border-t border-gray-100' },
                                        React.createElement('div', { 
                                            style: { fontSize: '0.625rem' }, 
                                            className: 'text-gray-500' 
                                        }, 
                                            `${historicalStats ? historicalStats.totalDrawings : historicalRecordsLimit} drawings analyzed`
                                        ),
                                        React.createElement('div', { className: 'flex gap-1' },
                                            React.createElement('button', {
                                                onClick: () => {
                                                    setSelectedNumbers(selection.numbers);
                                                    setPowerball(selection.powerball.toString());
                                                    setActiveTab('calculator');
                                                },
                                                style: { fontSize: '0.625rem' },
                                                className: 'bg-blue-600 text-white px-2 py-1 rounded hover:bg-blue-700 transition-colors'
                                            }, '✓ Use'),
                                            React.createElement('button', {
                                                onClick: () => {
                                                    const numbersText = `${selection.numbers.join(', ')} | PB: ${selection.powerball}`;
                                                    navigator.clipboard.writeText(numbersText);
                                                },
                                                style: { fontSize: '0.625rem' },
                                                className: 'bg-gray-800 text-white px-2 py-1 rounded hover:bg-gray-700 transition-colors'
                                            }, '📋')
                                        )
                                    )
                                )
                            )
                        )
                    ),

                    // 3-COLUMN LAYOUT FOR THE REST OF THE TOOLS
                    React.createElement('div', { className: 'grid grid-cols-3 gap-4' },
                        // Column 1: Statistical Overview Card with Settings
                        React.createElement('div', { className: 'space-y-4' },
                            // Historical Data Settings Card
                            React.createElement('div', { className: 'card bg-blue-50' },
                                React.createElement('h3', { className: 'text-lg font-semibold text-blue-800 mb-3' },
                                    '⚙️ Analysis Settings'
                                ),
                                React.createElement('div', { className: 'space-y-3' },
                                    React.createElement('div', null,
                                        React.createElement('label', { className: 'block text-xs font-medium text-blue-700 mb-1' },
                                            'Historical Records to Analyze:'
                                        ),
                                        React.createElement('select', {
                                            value: historicalRecordsLimit,
                                            onChange: (e) => setHistoricalRecordsLimit(parseInt(e.target.value)),
                                            className: 'w-full text-xs'
                                        },
                                            React.createElement('option', { value: 50 }, '50 Recent Drawings'),
                                            React.createElement('option', { value: 100 }, '100 Recent Drawings'),
                                            React.createElement('option', { value: 150 }, '150 Recent Drawings'),
                                            React.createElement('option', { value: 200 }, '200 Recent Drawings'),
                                            React.createElement('option', { value: 300 }, '300 Recent Drawings'),
                                            React.createElement('option', { value: 500 }, '500 Recent Drawings')
                                        )
                                    ),
                                    React.createElement('div', { className: 'text-xs text-blue-600' },
                                        'More records = better trend analysis',
                                        React.createElement('br', null),
                                        'Fewer records = more recent bias'
                                    ),
                                    React.createElement('button', {
                                        onClick: fetchHistoricalData,
                                        disabled: isLoadingHistory,
                                        className: isLoadingHistory ? 'btn btn-secondary w-full' : 'btn btn-primary w-full',
                                        style: { fontSize: '0.75rem' }
                                    },
                                        isLoadingHistory ? 'Updating...' : '🔄 Update Analysis'
                                    )
                                )
                            ),

                            // Statistical Analysis Card
                            historicalStats && React.createElement('div', { className: 'card bg-green-50' },
                                React.createElement('h3', { className: 'text-lg font-semibold text-green-800 mb-3' },
                                    '📊 Statistical Analysis'
                                ),
                                React.createElement('div', { style: { fontSize: '0.75rem' } },
                                    React.createElement('div', { className: 'mb-3' },
                                        React.createElement('h4', { className: 'font-semibold text-green-700 mb-1' }, 
                                            `Hot Numbers:`
                                        ),
                                        React.createElement('div', { className: 'flex flex-wrap gap-1' },
                                            historicalStats.hotNumbers?.slice(0, 8).map(num => 
                                                React.createElement('span', { 
                                                    key: num, 
                                                    className: 'bg-red-100 text-red-700 px-1 py-0.5 rounded text-xs font-semibold' 
                                                }, num)
                                            )
                                        )
                                    ),
                                    React.createElement('div', null,
                                        React.createElement('h4', { className: 'font-semibold text-green-700 mb-1' }, 
                                            'Cold Numbers:'
                                        ),
                                        React.createElement('div', { className: 'flex flex-wrap gap-1' },
                                            historicalStats.coldNumbers?.slice(0, 8).map(num => 
                                                React.createElement('span', { 
                                                    key: num, 
                                                    className: 'bg-blue-100 text-blue-700 px-1 py-0.5 rounded text-xs font-semibold' 
                                                }, num)
                                            )
                                        )
                                    )
                                ),
                                React.createElement('div', { className: 'mt-3 pt-3 border-t border-green-200 text-xs text-green-700' },
                                    `${historicalStats.totalDrawings} drawings analyzed`,
                                    React.createElement('br', null),
                                    `Source: ${historicalStats.dataSource || 'Historical API'}`
                                )
                            )
                        ),
                        
                        // Column 2: Strategy Selector
                        React.createElement('div', { className: 'card' },
                            React.createElement('h3', { className: 'text-lg font-semibold text-gray-800 mb-3' },
                                '🎯 Custom Generator'
                            ),
                            React.createElement('div', { className: 'space-y-3' },
                                React.createElement('div', null,
                                    React.createElement('label', { className: 'block text-xs font-medium text-gray-700 mb-1' },
                                        'Strategy:'
                                    ),
                                    React.createElement('select', {
                                        value: optimizationStrategy,
                                        onChange: (e) => setOptimizationStrategy(e.target.value),
                                        className: 'w-full text-xs'
                                    },
                                        React.createElement('option', { value: 'balanced' }, 'Balanced Mix'),
                                        React.createElement('option', { value: 'hot' }, 'Hot Numbers'),
                                        React.createElement('option', { value: 'cold' }, 'Cold Numbers'),
                                        React.createElement('option', { value: 'mathematical' }, 'Mathematical'),
                                        React.createElement('option', { value: 'hybrid' }, 'Hybrid')
                                    )
                                ),
                                React.createElement('div', null,
                                    React.createElement('label', { className: 'block text-xs font-medium text-gray-700 mb-1' },
                                        'Sets:'
                                    ),
                                    React.createElement('select', {
                                        value: numOptimizedSets,
                                        onChange: (e) => setNumOptimizedSets(parseInt(e.target.value)),
                                        className: 'w-full text-xs'
                                    },
                                        React.createElement('option', { value: 3 }, '3 Sets'),
                                        React.createElement('option', { value: 5 }, '5 Sets'),
                                        React.createElement('option', { value: 10 }, '10 Sets')
                                    )
                                )
                            ),
                            React.createElement('button', {
                                onClick: generateOptimizedNumbers,
                                disabled: isOptimizing || isLoadingHistory,
                                className: isOptimizing ? 'btn btn-secondary w-full mt-3' : 'btn btn-purple w-full mt-3',
                                style: { fontSize: '0.75rem' }
                            },
                                isOptimizing ? 'Generating...' : '🚀 Generate'
                            )
                        ),

                        // Column 3: Generated Results Preview
                        React.createElement('div', { className: 'card' },
                            React.createElement('h3', { className: 'text-lg font-semibold text-gray-800 mb-3' },
                                '🎲 Generated Sets'
                            ),
                            optimizedSets.length > 0 ? 
                                React.createElement('div', { className: 'space-y-2' },
                                    optimizedSets.slice(0, 3).map((set, index) => 
                                        React.createElement('div', { 
                                            key: index, 
                                            className: 'bg-gray-50 rounded p-2 border' 
                                        },
                                            React.createElement('div', { className: 'flex items-center justify-between mb-1' },
                                                React.createElement('span', { className: 'text-xs font-semibold text-gray-800' }, 
                                                    `Set ${index + 1}`
                                                ),
                                                React.createElement('span', { className: 'text-xs text-gray-500' }, 
                                                    `Score: ${set.score}`
                                                )
                                            ),
                                            React.createElement('div', { className: 'flex items-center gap-1 flex-wrap' },
                                                ...set.numbers.map(num => 
                                                    React.createElement('span', { 
                                                        key: num, 
                                                        className: 'bg-white px-1 py-0.5 rounded text-xs border' 
                                                    }, num)
                                                ),
                                                React.createElement('span', { className: 'bg-red-500 text-white px-1 py-0.5 rounded text-xs' }, 
                                                    set.powerball
                                                )
                                            ),
                                            React.createElement('div', { className: 'flex gap-1 mt-1' },
                                                React.createElement('button', {
                                                    onClick: () => {
                                                        setSelectedNumbers(set.numbers);
                                                        setPowerball(set.powerball.toString());
                                                        setActiveTab('calculator');
                                                    },
                                                    style: { fontSize: '0.625rem' },
                                                    className: 'bg-blue-600 text-white px-2 py-0.5 rounded hover:bg-blue-700'
                                                }, '✓ Use'),
                                                React.createElement('button', {
                                                    onClick: () => {
                                                        const numbersText = `${set.numbers.join(', ')} | PB: ${set.powerball}`;
                                                        navigator.clipboard.writeText(numbersText);
                                                    },
                                                    style: { fontSize: '0.625rem' },
                                                    className: 'bg-gray-600 text-white px-2 py-0.5 rounded hover:bg-gray-700'
                                                }, '📋')
                                            )
                                        )
                                    ),
                                    optimizedSets.length > 3 && React.createElement('div', { className: 'text-xs text-gray-500 text-center pt-2' },
                                        `+ ${optimizedSets.length - 3} more sets generated`
                                    )
                                ) :
                                React.createElement('div', { className: 'text-xs text-gray-500 text-center py-4' },
                                    'Use the generator to create custom number sets based on your preferred strategy.'
                                )
                        )
                    )
                ),

                // Tax Analysis Tab
                activeTab === 'taxes' && React.createElement('div', { style: { display: 'grid', gap: '2rem' } },
                    React.createElement('div', { className: 'card tax-breakdown' },
                        React.createElement('h2', { className: 'text-2xl font-semibold text-yellow-800 mb-4' },
                            '💰 Advanced Tax Analysis Calculator'
                        ),
                        React.createElement('p', { className: 'text-yellow-700 mb-4' },
                            'Calculate your actual take-home amount after federal and state taxes. All calculations use 2024 tax brackets and rates.'
                        ),
                        
                        // Input Controls
                        React.createElement('div', { className: 'tax-grid mb-6' },
                            React.createElement('div', null,
                                React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-2' },
                                    'Jackpot Amount ($):'
                                ),
                                React.createElement('input', {
                                    type: 'number',
                                    value: taxWinnings,
                                    onChange: (e) => setTaxWinnings(e.target.value),
                                    placeholder: 'Enter jackpot amount',
                                    className: 'w-full',
                                    min: '0',
                                    step: '1000000'
                                })
                            ),
                            React.createElement('div', null,
                                React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-2' },
                                    'State:'
                                ),
                                React.createElement('select', {
                                    value: taxState,
                                    onChange: (e) => setTaxState(e.target.value),
                                    className: 'w-full'
                                },
                                    Object.keys(stateTaxRates).map(state => 
                                        React.createElement('option', { key: state, value: state }, 
                                            `${state} (${(stateTaxRates[state] * 100).toFixed(1)}%)`
                                        )
                                    )
                                )
                            ),
                            React.createElement('div', null,
                                React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-2' },
                                    'Filing Status:'
                                ),
                                React.createElement('select', {
                                    value: taxFilingStatus,
                                    onChange: (e) => setTaxFilingStatus(e.target.value),
                                    className: 'w-full'
                                },
                                    React.createElement('option', { value: 'single' }, 'Single'),
                                    React.createElement('option', { value: 'marriedJointly' }, 'Married Filing Jointly')
                                )
                            ),
                            React.createElement('div', null,
                                React.createElement('label', { className: 'block text-sm font-medium text-gray-700 mb-2' },
                                    'Payment Option:'
                                ),
                                React.createElement('select', {
                                    value: takeLumpSum,
                                    onChange: (e) => setTakeLumpSum(e.target.value === 'true'),
                                    className: 'w-full'
                                },
                                    React.createElement('option', { value: true }, 'Lump Sum (Cash Value)'),
                                    React.createElement('option', { value: false }, 'Annuity (30 Years)')
                                )
                            )
                        ),

                        // Quick Fill Buttons
                        React.createElement('div', { className: 'flex gap-2 mb-6 flex-wrap' },
                            React.createElement('button', {
                                onClick: () => setTaxWinnings(currentJackpot?.amount || '735000000'),
                                className: 'btn btn-primary',
                                style: { fontSize: '0.875rem' }
                            }, `Use Current Jackpot (${currentJackpot?.formatted || '$735M'})`),
                            React.createElement('button', {
                                onClick: () => setTaxWinnings('1000000000'),
                                className: 'btn btn-secondary',
                                style: { fontSize: '0.875rem' }
                            }, 'Use $1B'),
                            React.createElement('button', {
                                onClick: () => setTaxWinnings('500000000'),
                                className: 'btn btn-secondary',
                                style: { fontSize: '0.875rem' }
                            }, 'Use $500M')
                        )
                    ),

                    // Tax Results Display
                    taxResults && React.createElement('div', { className: 'card' },
                        React.createElement('h3', { className: 'text-xl font-semibold text-gray-800 mb-6' },
                            '📊 Tax Breakdown Results'
                        ),
                        
                        // Summary Cards
                        React.createElement('div', { className: 'tax-grid mb-6' },
                            React.createElement('div', { className: 'tax-item' },
                                React.createElement('div', { className: 'tax-item-label' }, 'Gross Winnings'),
                                React.createElement('div', { className: 'tax-item-value' }, 
                                    `${taxResults.grossWinnings.toLocaleString()}`
                                ),
                                React.createElement('div', { className: 'tax-item-secondary' }, 
                                    taxResults.paymentType
                                )
                            ),
                            React.createElement('div', { className: 'tax-item' },
                                React.createElement('div', { className: 'tax-item-label' }, 'Federal Tax'),
                                React.createElement('div', { className: 'tax-item-value' }, 
                                    `${taxResults.federalTax.toLocaleString()}`
                                ),
                                React.createElement('div', { className: 'tax-item-secondary' }, 
                                    `${taxResults.effectiveFederalRate.toFixed(2)}% effective rate`
                                )
                            ),
                            React.createElement('div', { className: 'tax-item' },
                                React.createElement('div', { className: 'tax-item-label' }, `${taxState} State Tax`),
                                React.createElement('div', { className: 'tax-item-value' }, 
                                    `${taxResults.stateTax.toLocaleString()}`
                                ),
                                React.createElement('div', { className: 'tax-item-secondary' }, 
                                    `${(taxResults.stateRate * 100).toFixed(1)}% rate`
                                )
                            ),
                            taxResults.niit > 0 && React.createElement('div', { className: 'tax-item' },
                                React.createElement('div', { className: 'tax-item-label' }, 'Net Investment Tax'),
                                React.createElement('div', { className: 'tax-item-value' }, 
                                    `${taxResults.niit.toLocaleString()}`
                                ),
                                React.createElement('div', { className: 'tax-item-secondary' }, '3.8% on high earners')
                            ),
                            React.createElement('div', { className: 'tax-item', style: { background: '#f0fdf4', border: '2px solid #22c55e' } },
                                React.createElement('div', { className: 'tax-item-label' }, 'Your Take-Home'),
                                React.createElement('div', { className: 'tax-item-value', style: { color: '#059669', fontSize: '1.5rem' } }, 
                                    `${taxResults.netWinnings.toLocaleString()}`
                                ),
                                React.createElement('div', { className: 'tax-item-secondary' }, 
                                    `After ${taxResults.effectiveTotalRate.toFixed(1)}% total tax`
                                )
                            )
                        ),

                        // Federal Tax Bracket Breakdown
                        React.createElement('div', { className: 'bg-gray-50 rounded-lg p-4' },
                            React.createElement('h4', { className: 'font-semibold text-gray-800 mb-3' }, 
                                'Federal Tax Bracket Breakdown:'
                            ),
                            React.createElement('div', { className: 'space-y-2' },
                                taxResults.federalTaxDetails.map((bracket, index) => 
                                    React.createElement('div', { 
                                        key: index, 
                                        className: 'flex justify-between items-center bg-white p-2 rounded border' 
                                    },
                                        React.createElement('span', { style: { fontSize: '0.875rem' } },
                                            `${(bracket.rate * 100).toFixed(0)}% on ${bracket.income.toLocaleString()}`
                                        ),
                                        React.createElement('span', { className: 'font-semibold' },
                                            `${bracket.tax.toLocaleString()}`
                                        )
                                    )
                                )
                            )
                        ),

                        // Important Notes
                        React.createElement('div', { 
                            className: 'bg-yellow-50 border border-yellow-200 rounded-lg p-4 mt-4',
                            style: { fontSize: '0.875rem' }
                        },
                            React.createElement('h5', { className: 'font-semibold text-yellow-800 mb-2' }, 
                                '⚠️ Important Tax Considerations:'
                            ),
                            React.createElement('ul', { className: 'text-yellow-700 space-y-1' },
                                React.createElement('li', null, '• This calculator uses 2024 federal tax brackets'),
                                React.createElement('li', null, '• Additional state-specific deductions may apply'),
                                React.createElement('li', null, '• Consider consulting a tax professional for large winnings'),
                                React.createElement('li', null, '• Withholding rates may differ from actual tax owed'),
                                React.createElement('li', null, '• Gift and estate tax implications not included')
                            )
                        )
                    )
                ),

                // Expected Value Tab
                activeTab === 'expected' && React.createElement('div', { className: 'card text-center p-6' },
                    React.createElement('h2', { className: 'text-2xl font-semibold text-gray-800 mb-4' },
                        '📊 Expected Value Analysis'
                    ),
                    React.createElement('p', { className: 'text-gray-600 mb-4' },
                        'Feature coming soon! The tax calculator and number optimization are fully functional.'
                    )
                )
            );
        }

        // Error boundary component
        class ErrorBoundary extends React.Component {
            constructor(props) {
                super(props);
                this.state = { hasError: false, error: null };
            }

            static getDerivedStateFromError(error) {
                return { hasError: true, error: error };
            }

            componentDidCatch(error, errorInfo) {
                console.error('React Error:', error, errorInfo);
            }

            render() {
                if (this.state.hasError) {
                    return React.createElement('div', { style: { padding: '2rem', textAlign: 'center' } },
                        React.createElement('h2', null, 'Something went wrong!'),
                        React.createElement('details', { style: { marginTop: '1rem', textAlign: 'left' } },
                            React.createElement('summary', null, 'Error Details'),
                            React.createElement('pre', { 
                                style: { background: '#f3f4f6', padding: '1rem', borderRadius: '4px', fontSize: '0.875rem' } 
                            }, this.state.error && this.state.error.toString())
                        ),
                        React.createElement('button', {
                            onClick: () => window.location.reload(),
                            style: { marginTop: '1rem', padding: '0.5rem 1rem', background: '#3b82f6', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }
                        }, 'Reload Page')
                    );
                }

                return this.props.children;
            }
        }

        // Render the app
        ReactDOM.render(
            React.createElement(ErrorBoundary, null,
                React.createElement(AdvancedLotteryAnalysisSystem)
            ),
            document.getElementById('root')
        );
    </script>
</body>
</html>
